{"version":3,"sources":["components/common/Loading.tsx","components/common/Spinner.tsx","components/todo/TodoService.tsx","components/todo/template/TodoTemplate.tsx","components/todo/template/head/TodoHead.tsx","components/todo/template/list/item/TodoItem.tsx","components/todo/template/list/TodoList.tsx","components/todo/template/create/TodoCreate.tsx","components/todo/template/footer/TodoFooter.tsx","components/todo/TodoContainer.tsx","App.tsx","index.js"],"names":["Loading","props","LoadingOutlined","style","fontSize","size","spin","StyledSpinnerWrapper","styled","Row","styleProps","Spinner","tip","delay","mask","className","justify","align","indicator","defaultProps","initialTodos","TodoTemplateBlock","div","TodoTemplate","children","React","memo","TodoHeadBlock","DateText","DayText","TodoHead","useState","day","date","year","dateInfo","setDateInfo","getMonth","today","Intl","DateTimeFormat","month","format","useEffect","Date","getDay","getDate","getFullYear","Remove","TodoItemBlock","CheckCircle","done","css","Text","DueDate","TodoItem","toggleTodo","removeTodo","todo","onClick","id","CheckOutlined","text","due","DeleteOutlined","TodoListBlock","TodoList","todos","map","CircleButton","button","InsertFormPositioner","InsertForm","form","Input","input","Duedate","DatePicker","TodoCreate","nextId","createTodo","incrementNextId","open","setOpen","value","setValue","dueDate","setDueDate","onSubmit","e","preventDefault","autoFocus","placeholder","onChange","target","dateString","PlusCircleOutlined","TodoFooterBlock","LeftText","Todofooter","undoneTasks","filter","length","TodoContainer","todoState","setTodoState","nextIdState","loadData","saveData","data","localStorage","getItem","undefined","JSON","parse","setItem","stringify","newTodoState","prevState","concat","useTodo","TodoFooter","App","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.422c44af.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { SpinSize } from 'antd/lib/spin';\n\ninterface ILoadingProps {\n\tsize?: SpinSize;\n\tstyle?: React.CSSProperties;\n}\n\nexport default function Loading(props: ILoadingProps): ReactElement {\n\treturn <LoadingOutlined style={{ fontSize: props.size === 'large' ? 48 : 24, ...props.style }} spin />;\n}\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { Spin, Row, Col } from 'antd';\nimport { SpinSize } from 'antd/lib/spin';\n\nimport Loading from './Loading';\n\ninterface ISpinnerProps {\n\ttip?: string;\n\tsize?: SpinSize;\n\tdelay?: number;\n\tstyle?: React.CSSProperties;\n\tmask?: boolean;\n}\n\ninterface IWrapperProp {\n\treadonly ['data-mask']: boolean;\n}\n\nconst StyledSpinnerWrapper = styled(Row)<IWrapperProp>`\n\tbackground-color: ${styleProps => (styleProps['data-mask'] ? 'rgba(0, 0, 0, 0.1)' : 'transparent')};\n`;\n\nfunction Spinner(props: ISpinnerProps): ReactElement {\n\tconst { tip, size, delay, style, mask = false } = props;\n\n\treturn (\n\t\t<StyledSpinnerWrapper className=\"spinner-wrap\" justify=\"center\" align=\"middle\" style={style} data-mask={mask}>\n\t\t\t<Col>\n\t\t\t\t<Spin indicator={<Loading size={size} />} delay={delay} tip={tip} size={size} />\n\t\t\t</Col>\n\t\t</StyledSpinnerWrapper>\n\t);\n}\n\nSpinner.defaultProps = {\n\ttip: '로딩중입니다.',\n\tsize: 'large',\n\tdelay: 0,\n\tstyle: {},\n\tmask: false,\n};\n\nexport default Spinner;\n","import { useState, useEffect } from \"react\";\n\nexport type Itodo = {\n  id: number;\n  text: string;\n  done: boolean;\n  due: string;\n};\n\nlet initialTodos: Itodo[] = [];\n\nexport const useTodo = () => {\n  const [todoState, setTodoState] = useState(initialTodos);\n  var nextIdState = 0;\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    saveData();\n  }, [todoState]);\n\n  const incrementNextId = () => {\n    nextIdState = nextIdState + 1;\n  };\n\n  const toggleTodo = (id: number) => {\n    const newTodoState = todoState.map((todo) => {\n      if (todo.id === id) {\n        todo.done = todo.done ? false : true;\n      }\n      return todo;\n    });\n    setTodoState(newTodoState);\n  };\n\n  const removeTodo = (id: number) => {\n    setTodoState((prevState) =>\n      prevState.filter((todo: Itodo) => todo.id !== id)\n    );\n  };\n\n  const createTodo = (todo: Itodo) => {\n    const nextId = todoState.length + 1;\n    setTodoState((prevState) =>\n      prevState.concat({\n        ...todo,\n        id: nextId,\n      })\n    );\n  };\n\n  const loadData = () => {\n    let data = localStorage.getItem(\"todos\");\n    if (data === undefined) data = \"\";\n    initialTodos = JSON.parse(data!);\n    if (initialTodos && initialTodos.length >= 1) {\n      incrementNextId();\n    }\n    setTodoState(initialTodos);\n  };\n\n  const saveData = () => {\n    localStorage.setItem(\"todos\", JSON.stringify(todoState));\n  };\n\n  return {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    toggleTodo,\n    removeTodo,\n    createTodo,\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoTemplateBlock = styled.div`\n  width: 70%;\n  height: 800px;\n\n  min-width: 360px;\n  max-width: 700px;\n\n  position: relative;\n  background: white;\n  border-radius: 30px;\n  box-shadow: 0 0 50px 0 rgba(0, 0, 0, 0.1);\n\n  margin: 0 auto;\n\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction TodoTemplate(props: any) {\n  return <TodoTemplateBlock>{props.children}</TodoTemplateBlock>;\n}\n\nexport default React.memo(TodoTemplate);\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\ninterface IdateInfo {\n  day: string | null;\n  date: string | null;\n  year: number | null;\n}\n\nconst TodoHeadBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 52px;\n  padding-bottom: 24px;\n  border-bottom: 3px solid #33bb77;\n`;\n\nconst DateText = styled.div`\n  font-size: 26px;\n  color: #119955;\n  padding-left: 10px;\n`;\n\nconst DayText = styled.div`\n  font-size: 22px;\n  color: #119955;\n  padding-top: 5px;\n`;\n\nconst TodoHead = () => {\n  const [dateInfo, setDateInfo] = useState<IdateInfo>({\n    day: null,\n    date: null,\n    year: null,\n  });\n\n  const getMonth = (today: Date) => {\n    const option: { month: \"long\" } = { month: \"long\" };\n    return new Intl.DateTimeFormat(\"en-US\", option).format(today);\n  };\n\n  useEffect(() => {\n    const today = new Date();\n    const dayOfWeek = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    setDateInfo({\n      day: dayOfWeek[today.getDay()],\n      date: `${getMonth(today)} ${today.getDate()}, `,\n      year: today.getFullYear(),\n    });\n  }, []);\n\n  return (\n    <TodoHeadBlock>\n      <DayText>{dateInfo.day}</DayText>\n      <DateText>{`${dateInfo.date} ${dateInfo.year}`}</DateText>\n    </TodoHeadBlock>\n  );\n};\n\nexport default React.memo(TodoHead);\n","import { CheckOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #119955;\n  font-size: 16px;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div<{ done: boolean }>`\n  width: 20px;\n  height: 20px;\n  border-radius: 16px;\n  border: 1px solid #33bb77;\n  font-size: 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${(props) =>\n    props.done &&\n    css`\n      border: 1px solid #dddddd;\n      color: #dddddd;\n    `}\n`;\n\nconst Text = styled.div<{ done: boolean }>`\n  flex: 1;\n  font-size: 16px;\n  color: #119955;\n  ${(props) =>\n    props.done &&\n    css`\n      color: #ced4da;\n      text-decoration: line-through;\n    `}\n`;\n\nconst DueDate = styled.div<{ done: boolean }>`\n  font-size: 16px;\n  color: #119955;\n  padding-right: 1rem;\n  ${(props) =>\n    props.done &&\n    css`\n      color: #ced4da;\n      text-decoration: line-through;\n    `}\n`;\n\ninterface TodoItemProps {\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n  todo: Itodo;\n}\n\nconst TodoItem = ({ toggleTodo, removeTodo, todo }: TodoItemProps) => {\n  const handleToggle = () => {\n    toggleTodo(todo.id);\n  };\n\n  const handleRemove = () => {\n    removeTodo(todo.id);\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={todo.done} onClick={handleToggle}>\n        {todo.done && <CheckOutlined />}\n      </CheckCircle>\n      <Text done={todo.done}>{todo.text}</Text>\n      <DueDate done={todo.done}>{todo.due}</DueDate>\n      <Remove onClick={handleRemove}>\n        <DeleteOutlined />\n      </Remove>\n    </TodoItemBlock>\n  );\n};\n\nexport default React.memo(TodoItem);\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport TodoItem from \"./item/TodoItem\";\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\ninterface TodoListProps {\n  todos: Itodo[];\n  toggleTodo: (id: number) => void;\n  removeTodo: (id: number) => void;\n}\n\nconst TodoList = ({ toggleTodo, removeTodo, todos }: TodoListProps) => {\n  return (\n    <TodoListBlock>\n      {todos &&\n        todos.map((todo) => (\n          <TodoItem\n            toggleTodo={toggleTodo}\n            removeTodo={removeTodo}\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n    </TodoListBlock>\n  );\n};\n\nexport default React.memo(TodoList);\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { Itodo } from \"components/todo/TodoService\";\nimport { DatePicker } from \"antd\";\n\nconst CircleButton = styled.button<{ open: boolean }>`\n  background: #33bb77;\n  width: 50px;\n  height: 50px;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  left: 50%;\n  transform: translate(50%, 0%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  border-bottom: 1px solid #eeeeee;\n`;\n\nconst InsertForm = styled.form`\n  display: flex;\n  background: #eeeeee;\n  padding-left: 40px;\n  padding-top: 36px;\n  padding-right: 60px;\n  padding-bottom: 36px;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border: 1px solid #dddddd;\n  width: 60%;\n  outline: none;\n  font-size: 21px;\n  box-sizing: border-box;\n  color: #119955;\n  &::placeholder {\n    color: #dddddd;\n    font-size: 16px;\n  }\n`;\n\nconst Duedate = styled(DatePicker)`\n  padding: 12px;\n  font-size: 21px;\n  box-sizing: border-box;\n  margin-left: 1rem;\n`;\n\ninterface TodoCreateProps {\n  nextId: number;\n  createTodo: (todo: Itodo) => void;\n  incrementNextId: () => void;\n}\n\nconst TodoCreate = ({\n  nextId,\n  createTodo,\n  incrementNextId,\n}: TodoCreateProps) => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n\n  const handleToggle = () => setOpen(!open);\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) =>\n    setValue(e.target.value);\n\n  const onChange = (date: moment.Moment | null, dateString: string) => {\n    setDueDate(dateString);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault(); // 새로고침 방지\n\n    createTodo({\n      id: nextId,\n      text: value,\n      done: false,\n      due: dueDate,\n    });\n    incrementNextId(); // nextId 하나 증가\n\n    setValue(\"\"); // input 초기화\n    setOpen(false); // open 닫기\n  };\n\n  return (\n    <>\n      <InsertFormPositioner>\n        <InsertForm onSubmit={handleSubmit}>\n          <Input\n            autoFocus\n            placeholder=\"What's need to be done?\"\n            onChange={handleChange}\n            value={value}\n          />\n          <Duedate placeholder=\"Due date\" onChange={onChange} />\n          <CircleButton onClick={handleToggle} open={open}>\n            <PlusCircleOutlined />\n          </CircleButton>\n        </InsertForm>\n      </InsertFormPositioner>\n    </>\n  );\n};\n\nexport default React.memo(TodoCreate);\n","import { Itodo } from \"components/todo/TodoService\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst TodoFooterBlock = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding-top: 24px;\n  padding-bottom: 24px;\n`;\n\nconst LeftText = styled.div`\n  color: #33bb77;\n  font-size: 18px;\n`;\n\ninterface HooksTodoHeadProps {\n  todos: Itodo[];\n}\n\nconst Todofooter = ({ todos }: HooksTodoHeadProps) => {\n  const undoneTasks = todos.filter((todo) => !todo.done);\n  return (\n    <TodoFooterBlock>\n      <LeftText className=\"tasks-left\">\n        {undoneTasks.length} items left\n      </LeftText>\n    </TodoFooterBlock>\n  );\n};\n\nexport default React.memo(Todofooter);\n","import { useTodo } from \"./TodoService\";\nimport TodoTemplate from \"./template/TodoTemplate\";\nimport TodoHead from \"./template/head/TodoHead\";\nimport TodoList from \"./template/list/TodoList\";\nimport TodoCreate from \"./template/create/TodoCreate\";\nimport TodoFooter from \"./template/footer/TodoFooter\";\n\nconst TodoContainer = () => {\n  const {\n    todoState,\n    nextIdState,\n    incrementNextId,\n    toggleTodo,\n    removeTodo,\n    createTodo,\n  } = useTodo();\n  \n  return (\n    <>\n      <TodoTemplate>\n        <TodoHead />\n        <TodoCreate\n          nextId={nextIdState}\n          createTodo={createTodo}\n          incrementNextId={incrementNextId}\n        />\n        <TodoList\n          toggleTodo={toggleTodo}\n          removeTodo={removeTodo}\n          todos={todoState}\n        />\n        <TodoFooter todos={todoState} />\n      </TodoTemplate>\n    </>\n  );\n};\n\nexport default TodoContainer;\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\nimport Spinner from \"./components/common/Spinner\";\nimport TodoContainer from \"./components/todo/TodoContainer\";\n\nfunction App() {\n  //@TODO login\n  let isLogged = true;\n\n  const RenderLayout = (\n    <div>\n      <TodoContainer />\n    </div>\n  );\n\n  return isLogged ? RenderLayout : <Spinner mask />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createGlobalStyle } from \"styled-components\";\nimport App from \"./App\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #eeeeee;\n  }\n`;\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}